-keep class scala.Function1

# Android

-dontpreverify
-repackageclasses ''
-allowaccessmodification
-optimizations !code/simplification/arithmetic

-keep public class $package$.$main_activity$

# Scala applications with the scala runtime

#-libraryjars <java.home>/lib/rt.jar

-dontwarn scala.**

-keepclasseswithmembers public class * {
    public static void main(java.lang.String[]);
}

-keep class * implements org.xml.sax.EntityResolver

-keepclassmembers class * {
    ** MODULE\$;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinPool {
    long ctl;
    long eventCount;
    int  workerCounts;
    int  runControl;
    scala.concurrent.forkjoin.ForkJoinPool\$WaitQueueNode syncStack;
    scala.concurrent.forkjoin.ForkJoinPool\$WaitQueueNode spareStack;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinWorkerThread {
    int base;
    int sp;
    int runState;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinTask {
    int status;
}

-keepclassmembernames class scala.concurrent.forkjoin.LinkedTransferQueue {
    scala.concurrent.forkjoin.LinkedTransferQueue\$PaddedAtomicReference head;
    scala.concurrent.forkjoin.LinkedTransferQueue\$PaddedAtomicReference tail;
    scala.concurrent.forkjoin.LinkedTransferQueue\$PaddedAtomicReference cleanMe;
}

-keepclassmembers class scala.concurrent.forkjoin.ForkJoinPool\$WorkQueue { int runState; }

-keepclassmembernames class scala.concurrent.forkjoin.LinkedTransferQueue {
    int sweepVotes;
    scala.concurrent.forkjoin.LinkedTransferQueue\$Node tail;
    scala.concurrent.forkjoin.LinkedTransferQueue\$Node head;
}
-keepclassmembernames class scala.concurrent.forkjoin.LinkedTransferQueue\$Node {
    java.lang.Object item;
    java.lang.Thread waiter;
    scala.concurrent.forkjoin.LinkedTransferQueue\$Node next;
}
-keepclassmembers class scala.concurrent.forkjoin.ForkJoinTask\$ExceptionNode {
    scala.concurrent.forkjoin.ForkJoinTask\$ExceptionNode next;
}
-keepclassmembers class * {
    ** parkBlocker;
}
